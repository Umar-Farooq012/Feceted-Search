create or replace type t_emp_rows as object(
    ID NUMBER,
    NATURE VARCHAR2(150),
    MARLA VARCHAR2(50),
    STATUS VARCHAR2(50)
);

create or replace type t_emp_tables as table of t_emp_rows;


create or replace function get_faceted_search_inventory( 
    p_page_id in number,
    p_region_static_id in varchar2
) return t_emp_tables pipelined is
    l_region_id number;
    l_context apex_exec.t_context;

    -- Use a nested table to store column indexes
    type t_col_index is table of pls_integer index by varchar2(255);
    l_col_index t_col_index;

    procedure get_column_indexes( p_columns apex_t_varchar2 ) is
    begin
        for i in 1 .. p_columns.count loop
            l_col_index( p_columns( i ) ) := apex_exec.get_column_position( 
                                                 p_context => l_context, 
                                                 p_column_name => p_columns( i ) );
        end loop;
    end get_column_indexes;

begin
    -- 1. get the region ID of the Faceted Search region
    select region_id
    into l_region_id
    from apex_application_page_regions
    where application_id = v('APP_ID')
    and page_id = p_page_id
    and static_id = p_region_static_id;

    -- 2. Get a cursor (apex_exec.t_context) for the current region data
    l_context := apex_region.open_query_context(
        p_page_id => p_page_id,
        p_region_id => l_region_id
    );

    -- 3. Get column indexes
    get_column_indexes(apex_t_varchar2('ID', 'NATURE', 'MARLA', 'STATUS'));

    while apex_exec.next_row(p_context => l_context) loop
        pipe row(t_emp_rows(
            apex_exec.get_number(p_context => l_context, p_column_idx => l_col_index('ID')),
            apex_exec.get_varchar2(p_context => l_context, p_column_idx => l_col_index('NATURE')),
            apex_exec.get_varchar2(p_context => l_context, p_column_idx => l_col_index('MARLA')),
            apex_exec.get_varchar2(p_context => l_context, p_column_idx => l_col_index('STATUS'))
        ));
    end loop;

    apex_exec.close(l_context);

    return;
exception
    when no_data_needed then
        apex_exec.close(l_context);
        return;
    when others then
        apex_exec.close(l_context);
        raise;
end get_faceted_search_inventory;

select ename, sal , job from table(get_faceted_search_inventory(:APP_PAGE_ID, 'FC_EMP'));
